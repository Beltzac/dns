using DNS.Client;
using DNS.Client.RequestResolver;
using DNS.Protocol;
using DNS.Protocol.ResourceRecords;
using DNS.Server;
using Microsoft.Extensions.Caching.Memory;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
//using Newtonsoft.Json;
using StackExchange.Redis;
using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Threading;
using System.Threading.Tasks;

namespace beltzac.dns
{
    class Program
    {




        static async Task Main(string[] args)
        {
            //dig -p 53553 @DESKTOP-2E32IJH.local A www.beltzac.com.br

            //// Bind to a Domain Name Server
            //DnsClient client = new DnsClient("8.8.8.8");

            //// Create request bound to 8.8.8.8
            //ClientRequest request = client.Create();

            //// Returns a list of IPs
            //IList<IPAddress> ips1 = await client.Lookup("www.beltzac.com.br");


            //IList<IPAddress> ips = await client.Lookup("www.google.com");


            //Request request = new Request();

            //request.RecursionDesired = true;
            //request.Id = 123;
            //request.Questions.Add(new Question(new Domain("beltzac.com.br")));

            //UdpClient udp = new UdpClient();
            //IPEndPoint google = new IPEndPoint(IPAddress.Parse("8.8.8.8"), 53);

            //// Send to google's DNS server
            //await udp.SendAsync(request.ToArray(), request.Size, google);

            //UdpReceiveResult result = await udp.ReceiveAsync();
            //byte[] buffer = result.Buffer;
            //Response response = Response.FromArray(buffer);

            //// Outputs a human readable representation
            //Console.WriteLine(response);


            //var pong = await db.PingAsync();
            //Console.WriteLine(pong);


            // Proxy to google's DNS
            //MasterFile masterFile = new MasterFile();
            //CacheResolver cacheResolver = new CacheResolver(new UdpRequestResolver(new IPEndPoint(IPAddress.Parse("8.8.8.8"), 53) ));

            var list = @"
199.255.137.34
2001:470:1f1a:78e::2
8.8.8.8
199.85.126.10
2001:4860:4860::8844
149.112.112.112
142.77.2.101
142.77.2.85
199.85.126.30
45.33.97.5
129.250.35.250
156.154.70.1
185.228.169.9
199.2.252.10
204.117.214.10
204.194.232.200
204.194.234.200
165.87.13.129
165.87.201.244
8.0.6.0
8.0.7.0
192.221.134.0
192.221.135.0
208.67.222.220
209.244.0.4
2620:74:1c::2:2
2620:74:1b::1:1
2620:0:ccd::2
2620:0:ccc::2
2001:470:20::2
4.2.2.6
198.82.247.34
9.9.9.10
45.90.28.193
68.87.64.146
68.87.72.134
68.87.73.242
68.87.74.162
74.93.247.57
185.228.168.9
156.154.70.5
52.3.100.184
45.90.28.0
45.90.28.165
45.90.28.226
207.59.153.242
149.112.112.9
2620:119:35::35
2001:418:3ff::1:53
2001:418:3ff::53
2001:468:c80:2101:0:100:0:22
2001:978:1:1::d
12.127.17.72
151.196.0.37
151.197.0.37
151.197.0.38
151.198.0.38
151.198.0.39
151.199.0.39
151.201.0.38
151.201.0.39
151.202.0.84
151.202.0.85
156.154.70.22
166.102.165.32
192.133.129.2
2610:a1:1019::1
2620:fe::fe
205.214.45.10
209.51.161.14
64.94.1.33
66.232.139.10
216.106.1.3
216.165.129.158
66.28.0.45
24.113.32.30
195.7.64.3
206.253.33.130
216.17.128.2
66.109.229.4
66.109.229.6
216.199.54.9
206.74.254.2
207.170.3.6
207.217.126.81
66.216.18.222
66.242.160.5
66.242.160.6
207.68.32.39
207.69.188.185
208.38.65.35
209.216.160.2
209.253.113.10
68.87.72.130
68.87.74.166
69.16.132.4
69.169.190.211
69.28.104.5
63.246.63.142
205.171.3.65
64.233.217.2
64.238.96.12
216.138.97.246
64.80.255.251
198.54.117.10
45.67.219.208
2001:418:8006::12
2620:fe::10
45.90.30.126
107.155.83.188
162.245.221.19
24.96.80.122
69.1.1.251
45.90.28.169
45.90.30.169
4.2.2.4
64.212.106.84
156.154.71.25
206.165.6.11
149.112.112.11
2606:4700:4700::1111
141.155.0.68
199.187.127.201
66.187.166.250
9.9.9.12
38.132.106.139
149.112.112.12
169.53.182.124
12.150.118.64
76.81.95.43
50.204.174.58
76.190.56.126
184.55.4.145
96.87.252.245
74.93.217.204
98.38.222.125
173.11.131.1
73.77.45.195
50.239.7.17
50.241.117.197
98.255.2.112
98.208.56.152
50.247.100.49
98.244.8.17
50.76.49.81
50.238.17.2
63.66.34.238
98.152.56.27
76.82.118.158
71.69.166.70
65.246.64.217
50.220.226.155
50.220.226.159
50.205.171.65
71.67.219.165
24.29.229.204
74.219.92.60
74.218.74.28
74.218.98.94
65.30.52.105
184.57.52.14
162.154.159.65
184.57.113.53
74.137.101.244
184.56.47.19
98.103.52.125
71.67.90.52
71.66.184.98
98.144.100.248
71.67.192.50
75.75.2.183
98.45.82.80
96.69.146.9
50.204.103.135
96.65.91.65
96.88.179.101
75.73.8.108
107.0.74.232
73.7.179.224
73.69.210.137
173.15.216.99
96.65.163.149
50.238.53.122
50.231.115.22
73.6.84.50
67.162.161.106
50.217.25.205
73.118.159.191
76.103.90.232
96.91.26.132
96.2.228.18
173.46.67.172
4.2.2.5
156.154.71.1
216.231.41.2
64.81.45.2
64.81.79.2
66.93.87.2
64.81.127.2
66.92.64.2
66.92.159.2
66.92.224.2
216.254.95.2
216.27.175.2
162.155.248.54
98.103.170.130
71.67.74.10
74.218.74.4
24.106.28.52
184.55.17.150
65.27.67.206
208.68.186.3
173.89.42.201
71.67.195.27
70.92.127.134
208.68.186.2
162.154.81.146
173.88.7.140
98.102.15.18
24.166.251.56
24.172.82.94
98.100.183.123
75.185.115.69
70.61.254.130
104.231.164.10
173.89.30.48
65.27.154.0
74.219.120.210
24.123.35.111
24.166.33.85
24.123.237.3
147.0.63.59
104.231.120.44
198.24.122.6
156.154.70.16
209.130.139.2
50.192.195.69
68.208.51.61
208.67.222.2
2610:a1:1018::5
2001:4860:4860::6464
208.67.220.2
2606:4700:4700::64
2606:4700:4700::6400
2610:a1:1019::2
2610:a1:1019::5
2620:fe::11
2620:fe::fe:10
2620:fe::fe:11
2620:fe::fe:9
2a0d:2a00:1::2
2a0d:2a00:2::2
9.9.9.11
155.130.14.5
199.85.127.10
192.3.165.37
198.74.48.37
2001:470:1f07:ed6::
198.54.117.11
2604:ffc0::
216.106.1.254
24.229.250.113
195.21.33.177
198.153.192.40
198.153.192.50
198.153.194.40
198.153.194.50
199.85.126.20
8.20.247.10
2001:468:c80:4101:0:100:0:42
12.127.16.67
12.127.17.71
141.154.0.68
151.196.0.38
151.203.0.85
166.102.165.13
199.44.194.2
206.124.65.253
208.72.160.67
209.253.113.2
216.194.28.33
216.229.0.25
45.90.28.126
45.90.30.226
64.132.94.250
64.135.1.20
64.69.100.68
64.69.98.35
64.80.203.194
64.80.255.240
66.155.216.122
66.251.35.130
66.6.65.5
71.40.44.8
173.54.198.78
192.227.194.176
129.213.120.87
104.237.155.194
64.42.176.84
23.227.169.6
184.166.240.7
66.150.214.211
64.225.55.244
24.106.33.53
73.218.78.216
193.122.147.250
3.12.255.165
40.70.57.226
99.95.233.129
68.3.58.120
157.230.8.34
159.65.218.222
97.107.131.193
167.71.162.193
44.237.115.146
103.196.38.38
103.196.38.39
23.95.186.177
8.20.247.2
50.192.49.195
64.212.106.85
72.14.189.116
104.237.132.182
74.208.48.185
73.163.249.188
45.33.93.149
34.123.244.210
173.48.189.31
13.58.243.139
13.77.209.40
172.105.151.149
45.33.19.180
51.81.240.133
135.148.33.177
71.255.105.220
107.173.114.102
64.251.23.31
216.53.203.162
128.153.253.65
74.207.144.224
66.212.128.196
54.209.71.248
73.37.9.117
167.99.122.57
165.22.155.141
50.90.174.76
192.160.132.225
71.63.246.85
76.19.148.18
18.119.166.126
104.131.83.215
152.67.254.221
18.117.77.206
54.226.101.126
144.253.76.147
161.35.62.92
157.245.92.215
69.126.225.82
161.35.99.134
45.33.45.43
66.172.27.126
104.220.138.172
70.114.40.119
192.155.84.230
136.30.241.13
51.81.33.24
104.168.44.220
34.105.53.115
54.225.133.124
173.72.25.91
66.23.205.82
51.81.147.9
3.18.106.252
193.239.146.58
52.91.199.143
47.47.2.106
165.22.41.251
142.93.58.50
99.36.28.239
96.126.114.57
45.32.175.179
69.164.209.209
70.37.83.208
3.16.166.83
23.254.224.175
18.118.145.172
135.148.152.129
51.81.147.10
35.215.79.244
52.35.39.17
168.235.98.190
73.229.160.239
20.75.162.96
173.230.142.117
207.246.94.220
3.139.123.245
206.189.199.60
192.40.140.17
23.95.164.149
159.65.164.18
209.181.17.195
34.83.4.12
65.220.16.5
45.79.85.147
208.59.79.107
209.182.236.64
160.238.71.10
45.79.139.155
18.217.82.113
35.238.119.67
198.71.53.51
66.169.180.25
207.244.241.86
3.22.229.161
198.12.71.224
68.45.48.91
75.134.54.99
173.76.120.159
45.79.31.164
69.19.196.120
104.42.219.168
18.221.177.113
71.201.187.143
74.80.16.186
45.32.7.211
173.54.212.177
198.23.196.92
107.152.39.49
3.138.207.52
50.116.63.53
45.79.181.42
192.81.131.190
18.118.110.41
209.141.53.49
52.53.223.197
3.140.101.228
198.98.51.236
104.200.30.76
45.79.208.108
209.126.4.187
143.198.239.216
198.58.103.205
69.47.154.175
45.79.113.244
45.79.7.39
165.232.155.61
104.168.122.188
50.47.133.215
45.79.47.93
45.55.54.35
74.97.16.212
50.116.0.80
158.101.8.117
206.189.195.210
3.237.5.56
173.82.245.253
74.207.235.154
65.129.41.93
3.20.100.151
66.23.205.85
143.244.188.61
18.235.96.63
98.126.160.134
3.21.234.208
67.205.134.75
64.42.183.141
173.230.158.42
96.126.120.12
50.104.87.242
107.170.225.126
18.224.182.198
3.140.210.151
138.197.240.56
13.65.206.173
52.146.10.246
3.80.81.248
35.212.146.131
3.142.97.128
40.71.46.230
64.225.118.35
104.220.49.251
54.163.19.152
209.208.28.129
3.238.183.162
47.186.216.94
96.126.101.252
65.36.83.100
98.177.60.187
144.172.118.26
45.56.103.237
70.35.201.84
18.118.241.163
173.54.194.226
18.236.105.32
107.152.38.85
132.145.173.120
100.14.250.149
213.188.212.157
23.228.171.190
45.76.77.141
74.208.137.72
51.81.208.46
71.255.234.227
208.87.134.216
68.59.154.145
159.65.240.71
184.167.178.103
71.86.210.211
185.211.35.198
138.68.14.159
52.237.161.209
50.116.21.249
107.20.40.210
104.131.164.106
3.14.82.95
70.94.177.13
172.104.5.78
52.167.28.252
40.122.191.149
3.101.155.215
157.245.14.210
45.79.164.113
165.227.113.209
205.185.120.177
68.11.233.122
23.239.5.85
161.35.250.81
3.128.134.204
18.218.102.4
66.177.142.179
157.230.219.158
68.21.132.167
68.62.186.162
52.188.68.184
3.143.233.94
67.212.19.202
198.74.55.250
178.128.181.62
64.227.7.25
206.189.207.123
104.48.97.180
45.86.209.128
68.104.117.58
66.42.80.231
54.161.20.77
52.91.81.253
216.161.175.211
69.195.132.18
72.208.239.61
45.79.54.231
198.199.93.157
70.170.103.237
132.226.61.79
100.38.61.46
64.64.110.3
54.237.237.3
143.110.224.61
70.176.163.92
98.191.165.17
209.181.88.166
38.100.213.243
198.98.62.247
65.52.62.146
96.79.69.178
163.182.154.76
192.252.199.252
54.177.86.230
134.122.122.133
104.248.216.28
147.182.227.175
45.56.108.159
107.152.36.200
76.25.248.166
54.187.6.158
68.51.230.245
45.76.235.195
72.190.76.238
206.174.87.18
3.140.137.19
134.209.74.65
52.73.139.208
72.14.187.108
24.234.184.20
142.93.199.194
3.14.10.107
173.255.225.25
198.199.75.220
67.205.134.21
142.202.189.116
144.172.75.180
52.183.121.95
18.223.166.86
38.100.213.248
35.212.151.151
135.148.152.130
143.198.234.120
143.198.180.177
143.110.225.163
52.15.164.117
192.3.165.102
45.26.114.60
165.227.4.226
67.1.31.45
18.224.228.124
35.172.228.174
35.226.51.72
71.198.143.169
23.113.176.39
64.119.7.226
192.34.59.42
108.28.229.154
150.136.50.38
97.107.129.183
104.236.99.23
50.116.10.184
65.49.133.223
44.232.109.120
18.222.232.28
45.79.129.138
150.136.136.67
18.219.245.219
50.116.40.206
45.78.28.91
38.108.119.165
69.92.0.250
34.66.89.80
192.3.130.150
40.117.214.133
192.3.163.253
98.161.167.9
3.237.82.12
45.79.108.112
143.198.69.248
107.191.107.133
206.81.12.77
23.95.216.169
157.230.4.235
107.170.250.50
23.95.216.52
208.104.39.3
45.79.48.245
45.33.7.54
165.227.196.25
52.14.184.88
173.18.123.180
45.79.18.45
67.176.88.249
161.35.236.184
138.68.52.89
96.235.174.128
198.23.249.118
73.22.209.124
157.230.51.15
50.116.33.209
161.35.232.246
50.116.59.154
174.140.72.112
143.198.8.1
167.172.247.253
34.68.161.242
64.227.98.88
34.74.31.240
24.7.17.128
208.113.132.236
192.240.99.205
64.76.64.75
73.222.30.21
167.71.179.181
45.79.86.155
54.67.107.61
64.33.248.165
207.244.230.133
54.146.137.212
165.232.150.47
66.175.221.146
107.12.42.244
13.72.67.84
45.32.130.95
75.73.241.32
73.244.97.97
69.137.41.36
70.240.243.225
159.65.46.5
104.131.67.25
98.202.251.174
209.181.254.2
69.164.207.102
192.53.125.242
45.33.97.215
72.14.187.237
172.105.157.50
18.216.209.128
45.56.86.171
67.215.237.132
40.122.48.194
45.79.99.176
47.152.66.165
157.245.142.13
198.98.50.248
138.197.229.77
24.49.9.127
198.251.74.38
73.57.18.241
164.90.255.26
207.148.16.38
18.117.242.148
45.33.68.222
3.143.250.246
51.81.168.10
173.28.188.80
71.114.106.85
173.255.235.189
18.222.31.109
74.199.104.234
50.116.5.234
208.104.21.121
71.158.155.36
45.33.88.107
52.176.107.66
159.203.158.110
3.143.247.102
34.121.39.203
208.52.182.164
54.71.212.32
71.213.149.7
50.116.60.92
216.45.37.190
96.126.126.92
52.165.156.69
165.227.25.247
192.210.213.112
132.145.210.59
135.148.100.25
34.232.241.252
159.203.187.29
75.175.108.147
149.28.40.67
45.77.199.140
3.84.238.34
96.233.201.56
149.28.51.202
54.241.56.76
99.78.85.25
172.245.187.126
173.255.115.182
24.214.27.84
18.216.89.229
134.209.124.245
24.158.91.17
52.186.174.228
159.65.45.156
23.92.69.226
129.2.68.4
18.191.77.126
167.172.217.88
34.66.134.150
74.208.253.90
13.57.33.81
208.117.81.39
74.134.135.155
3.138.35.87
64.72.86.253
96.78.236.125
207.244.237.204
150.136.51.21
198.71.55.185
34.139.93.111
104.236.162.184
23.96.186.222
172.245.118.121
65.35.135.250
107.173.114.10
20.51.243.204
74.92.225.41
64.227.106.141
69.138.25.246
173.236.107.212
104.181.191.208
104.197.245.246
173.163.101.137
73.34.45.9
205.185.117.210
24.236.32.126
54.89.174.86
155.138.228.57
129.146.9.200
24.161.27.200
173.244.51.54
138.197.102.22
104.196.194.67
13.52.103.219
98.176.237.95
44.198.16.154
74.208.25.190
45.79.160.24
68.112.236.239
108.34.141.9
45.79.85.145
45.79.94.76
3.134.85.21
98.42.21.103
23.239.18.13
97.113.106.252
129.146.47.65
5.153.234.92
45.33.33.234
18.223.107.169
100.16.173.219
75.3.207.194
34.106.54.18
96.43.137.220
73.169.237.154
185.216.231.175
75.108.124.110
44.195.158.66
198.98.56.134
192.3.253.13
23.95.234.28
40.114.77.209
165.22.45.243
24.19.105.82
173.255.197.182
35.133.186.169
173.255.198.114
165.227.100.133
34.227.16.122
45.79.17.31
184.105.255.144
147.182.222.218
3.144.116.4
209.126.84.75
3.140.41.82
18.216.145.163
138.128.246.115
45.33.61.99
156.19.135.76
64.227.88.146
161.35.8.217
185.148.129.132
104.255.175.2
209.58.147.36
216.119.155.49
23.19.245.84
23.19.245.88
23.226.134.242
23.226.134.243
2607:f130:0:f8::3085:e961
72.11.134.91
2001:470:0:45::2
2001:4870:6082:3::100
2001:4870:6082:3::5
2001:550:1:1::d
2001:550:1:2::d
2001:978:1:2::d
151.197.0.39
151.203.0.84
50.116.55.118
192.227.155.216
67.207.87.107
45.79.157.106
147.182.245.187
20.98.180.12
64.83.226.26
74.121.42.201
206.71.211.23
3.139.72.220
172.245.6.187
73.236.100.108
72.34.100.172
98.31.33.59
96.43.137.221
159.203.195.163
3.128.179.15
69.195.145.230
152.44.44.105
97.103.119.121
73.149.233.12
104.156.249.78
45.73.150.122
71.162.140.59
138.68.17.182
73.133.117.139
159.89.234.116
52.250.9.9
104.129.5.134
23.243.120.82
172.221.198.86
54.186.104.213
54.147.160.130
165.227.106.51
34.206.23.124
18.205.157.143
184.73.86.209
18.118.144.214
157.245.92.246
66.228.43.124
204.44.68.186
143.198.160.73
138.197.239.13
156.19.135.75
155.94.158.166
67.219.137.147
18.224.85.87
52.224.81.240
45.79.20.42
131.93.14.114
73.80.254.120
104.168.96.107
172.93.49.120
70.137.97.100
72.14.179.222
35.223.68.135
168.235.74.103
137.184.7.29
3.129.89.39
137.117.90.29
108.56.142.62
18.218.8.170
45.56.111.56
152.44.40.31
45.79.192.16
104.149.148.230
198.71.48.119
139.177.204.79
107.174.206.218
45.79.29.27
18.222.134.42
107.152.39.162
54.210.76.191
65.220.16.3
172.112.20.120
107.175.62.8
3.232.148.206
98.207.220.225
97.116.41.175
35.209.31.152
104.211.16.27
134.209.115.77
18.117.109.77
68.34.100.234
45.56.121.226
167.71.182.60
34.82.181.177
45.55.42.151
69.164.204.160
54.225.170.212
96.126.116.242
148.75.132.61
3.131.228.241
51.143.41.54
207.237.114.165
143.198.190.76
166.84.7.23
3.140.11.123
104.237.130.221
45.79.200.33
66.91.54.247
100.25.156.183
50.53.234.42
198.252.100.31
50.116.18.221
198.211.31.196
45.79.219.113
69.47.216.144
13.92.189.238
69.230.144.207
132.145.210.98
104.194.250.215
165.227.100.51
24.23.75.147
97.103.45.171
45.79.104.142
45.61.186.28
52.25.29.254
54.183.228.92
71.179.86.124
159.65.186.62
35.85.108.167
72.204.175.157
3.142.18.181
205.185.113.99
75.100.237.123
97.122.249.58
107.152.42.192
45.56.96.180
104.237.139.114
107.161.20.167
50.116.45.78
98.6.45.42
200.7.99.229
34.139.127.125
104.248.116.206
35.192.154.39
75.33.158.104
207.244.247.173
216.127.165.131
54.236.11.210
3.130.125.53
67.168.34.143
3.136.27.246
67.82.42.62
165.232.145.39
73.216.248.192
159.89.140.59
18.118.2.183
129.213.171.234
216.24.249.111
108.15.31.86
45.76.3.141
104.36.6.126
35.164.197.48
100.25.183.230
52.15.199.61
75.41.73.192
45.33.106.228
24.15.52.125
129.213.166.247
208.80.138.148
108.14.81.145
67.244.154.74
34.233.224.88
64.90.66.41
73.154.209.108
73.204.132.70
167.88.120.103
18.223.115.198
132.145.214.154
54.167.183.22
158.51.66.199
198.6.1.3
198.6.1.4
198.6.1.2
50.192.49.5
63.151.67.7
185.38.32.157
194.124.76.14
216.170.153.146
216.165.129.157
206.253.33.131
12.218.209.130
73.69.62.113
69.254.127.206
73.7.178.166
73.97.49.203
73.31.207.113
73.121.158.25
71.63.253.173
73.14.109.147
76.30.118.33
98.194.32.143
73.59.66.200
98.247.49.130
98.38.178.140
73.235.245.35
71.230.24.213
50.204.103.130
98.247.49.35
73.12.243.62
73.6.85.165
71.58.205.31
73.50.43.36
50.201.138.220
73.79.99.23
73.128.218.47
12.127.133.62
209.146.19.60
18.191.253.100
98.154.21.253
2001:470:71:1c::d
136.25.2.93
50.228.102.10
65.132.189.184
65.155.3.167
65.140.26.130
76.1.3.99
207.225.44.255
216.160.246.151
65.132.158.151
63.151.31.128
216.111.107.73
65.141.223.48
65.144.134.146
65.158.43.95
67.130.66.225
207.109.67.32
205.168.28.184
67.233.85.141
65.112.207.1
65.144.39.209
65.140.231.106
63.239.25.135
65.155.219.127
65.155.149.95
65.155.104.167
63.157.69.112
209.181.236.135
72.166.22.247
198.243.4.1
204.98.230.193
65.155.237.199
207.159.121.241
65.141.239.130
65.120.225.120
68.48.245.22
50.204.103.128
98.232.103.71
73.128.218.92
50.221.57.204
50.217.25.200
98.248.42.195
50.216.25.75
73.31.121.3
50.237.159.250
73.59.66.235
50.224.203.197
98.38.222.6
73.197.68.81
50.200.245.136
174.51.83.61
96.82.255.26
173.10.78.65
98.34.183.199
24.104.140.229
174.48.45.128
173.10.78.68
98.249.57.2
73.51.108.35
50.234.132.241
71.58.100.49
98.194.44.28
73.30.170.10
73.253.201.110
96.102.76.175
73.95.174.41
98.232.103.167
173.163.85.121
69.140.113.57
76.26.211.242
75.149.143.179
73.46.104.173
50.235.228.46
96.88.29.141
98.38.222.66
23.94.234.130
184.155.36.194
216.146.36.36
8.20.247.20
162.250.233.5
204.95.160.2
63.96.227.102
63.96.227.103
63.96.227.104
63.96.227.100
205.171.9.235
73.120.98.178
50.225.201.65
50.228.251.34
73.217.64.70
73.191.13.148
73.113.34.210
73.59.67.99
107.0.218.126
173.9.105.65
96.74.123.93
50.237.34.1
73.95.177.83
50.233.102.227
76.114.19.163
73.69.70.235
75.68.38.250
96.85.208.213
50.216.244.79
73.238.230.151
68.40.177.173
67.191.149.125
74.95.184.57
68.50.241.225
76.120.201.96
50.238.46.219
73.57.23.229
173.8.207.139
50.223.3.235
24.104.140.255
50.202.129.65
96.78.20.225
73.6.8.125
50.201.150.194
66.176.247.3
71.60.139.121
174.51.20.246
50.216.92.142
75.71.5.153
50.235.130.195
73.83.242.217
76.24.14.121
98.39.59.38
76.104.155.196
50.201.11.157
76.16.191.58
98.38.222.51
50.236.148.67
50.201.178.29
50.223.22.178
96.91.177.241
73.137.96.26
50.223.23.54
73.62.231.88
73.113.61.59
98.195.112.169
71.59.216.220
76.105.229.10
76.122.251.76
50.205.149.86
66.208.217.108
73.54.161.169
96.69.146.137
67.184.248.32
173.163.147.34
73.176.118.83
50.222.33.14
50.200.62.234
73.38.133.33
50.217.25.225
75.150.197.154
71.234.226.46
63.85.173.71
65.196.174.200
63.118.166.101
63.118.166.102
65.196.174.202
65.196.174.201
63.85.173.70
63.110.9.166
63.110.9.167
63.85.173.72
63.118.166.103
63.118.166.104
63.118.166.105
64.50.242.202
66.232.139.27
64.233.206.100
64.233.219.100
216.228.160.29
216.228.160.30
66.102.249.2
66.102.249.1
169.53.182.120
2600::2
147.182.250.62
45.90.28.129
45.90.30.129
2a07:a8c1::
35.155.221.215
35.167.25.37
52.24.103.199
54.214.161.74
216.146.35.35
9.9.9.9
2001:678:f68:70:5054:ff:fe57:4a07
64.18.124.15
98.149.90.178
45.50.19.147
98.152.204.166
76.93.213.111
108.61.222.205
4.2.2.1
4.2.2.2
24.99.148.175
24.98.20.247
24.99.148.61
24.98.217.49
24.125.54.118
24.98.85.47
24.125.55.212
24.125.116.30
24.99.148.29
24.98.195.23
24.98.20.141
24.99.149.148
24.30.14.149
24.99.6.26
24.99.148.85
50.204.42.225
24.99.149.127
24.98.20.156
24.125.55.22
24.125.55.144
65.209.4.224
108.56.80.135
65.249.143.193
68.239.29.101
71.190.170.15
71.174.63.172
98.117.179.134
100.4.184.110
96.250.208.198
71.105.183.2
72.83.134.178
108.55.16.82
100.33.16.107
24.143.1.21
66.115.98.85
45.90.28.250
98.152.7.10
66.8.206.174
69.75.150.3
23.242.73.87
173.196.165.158
70.95.198.72
76.94.140.154
173.196.206.90
107.184.254.255
184.190.49.40
68.1.40.86
68.105.173.68
70.171.58.112
70.171.58.83
68.1.86.231
68.105.46.149
72.207.238.183
70.167.51.147
24.250.147.103
68.105.172.184
72.198.188.68
68.101.125.175
70.171.60.6
70.171.50.31
70.171.57.30
174.76.39.125
184.177.13.42
70.171.47.19
70.171.60.213
70.171.51.41
24.136.58.6
184.177.84.201
72.207.237.152
184.187.144.144
70.191.189.96
24.170.197.68
174.64.35.164
184.187.143.241
174.69.40.212
70.171.50.159
184.177.13.43
68.226.164.170
24.170.199.20
184.180.127.251
172.108.131.83
104.169.249.117
45.52.246.159
50.111.59.58
172.109.162.236
50.124.196.116
50.32.90.26
47.180.220.235
47.149.48.126
104.169.173.144
50.122.66.214
47.205.157.138
50.107.108.125
50.209.92.140
50.213.108.249
50.209.90.189
107.0.64.220
50.79.154.34
50.213.99.237
50.73.57.173
24.2.55.249
23.30.36.188
24.7.145.175
12.175.173.242
12.189.150.34
99.33.211.165
12.29.213.137
207.243.150.98
12.220.213.238
12.226.243.108
12.94.185.158
12.187.204.83
12.235.201.167
76.214.112.221
12.195.1.194
12.21.84.193
12.71.143.33
12.7.53.90
45.19.254.97
12.40.39.5
12.221.135.162
45.19.183.177
12.132.115.37
174.69.27.196
70.191.197.173
98.179.205.197
70.171.46.114
69.92.80.174
67.61.140.70
67.60.183.242
24.116.92.101
23.251.28.82
159.118.79.99
24.116.20.54
209.54.7.201
24.119.69.70
24.117.84.9
24.116.176.167
98.142.51.144
69.92.156.94
67.61.9.254
67.61.50.69
67.61.51.53
198.71.117.66
108.175.22.60
47.180.210.165
50.107.15.57
204.195.155.209
207.244.166.111
65.175.163.205
216.36.31.135
174.140.97.225
159.250.216.16
72.28.218.113
207.255.161.44
159.250.135.171
72.28.164.248
207.255.161.152
207.255.161.68
71.131.159.30
12.248.32.118
12.186.190.40
12.38.10.232
12.86.159.162
12.171.163.90
23.115.248.204
68.74.126.226
23.115.93.91
12.165.204.88
12.69.229.15
12.233.244.115
12.208.117.131
12.139.112.152
12.186.153.128
12.4.165.95
63.192.101.69
12.169.155.213
12.189.141.191
45.26.218.225
98.179.205.194
70.171.61.101
72.203.158.18
70.191.191.35
24.250.147.79
70.178.103.58
68.106.160.116
98.172.219.33
174.71.248.85
70.171.59.149
70.184.7.113
174.69.40.233
98.38.178.162
107.2.141.30
96.102.121.126
73.74.57.121
50.201.178.63
73.90.82.227
50.219.55.167
98.39.154.157
96.64.147.229
50.242.234.97
98.194.45.193
50.201.178.59
73.32.84.89
73.206.234.153
73.136.41.40
50.197.81.162
50.222.112.82
98.197.99.37
76.122.250.103
75.149.56.210
73.14.43.241
50.204.98.114
73.136.9.117
50.222.131.40
98.212.26.255
96.64.201.177
173.161.75.77
67.166.30.234
73.124.233.66
71.193.212.206
96.76.108.253
75.72.173.147
50.229.154.179
73.189.158.141
76.107.196.89
216.17.128.1
216.172.91.1
50.241.238.69
65.34.231.1
5.61.27.53
156.154.70.6
156.154.70.7
156.154.70.8
156.154.70.10
156.154.70.11
198.6.1.60
38.242.202.141
216.106.88.3
23.31.46.121
216.172.87.1
23.31.51.242
96.249.63.93
65.217.208.149
45.90.28.189
162.211.33.243
69.174.153.224
199.27.253.66
162.211.33.242
216.130.230.77
173.242.96.121
216.130.230.154
216.130.230.39
173.73.70.42
65.203.131.152
74.108.21.187
50.220.111.14
50.220.111.47
107.220.176.5
12.20.157.71
12.106.127.194
66.82.4.12
45.24.191.81
12.49.232.97
12.229.148.195
63.193.177.193
12.180.222.116
12.139.180.178
12.238.89.57
139.151.179.8
12.71.198.244
12.22.40.167
99.35.220.90
206.121.21.46
12.251.95.14
12.217.229.66
12.68.237.194
66.44.48.35
24.159.121.211
65.66.161.139
12.119.172.194
12.12.131.134
12.195.135.217
207.108.220.16
50.77.103.165
50.192.13.172
8.26.56.26
12.204.162.62
12.121.118.9
108.81.253.153
209.37.190.138
12.121.117.73
12.196.141.172
12.227.90.122
12.97.174.103
108.78.238.230
32.132.138.150
12.185.61.49
12.208.155.56
45.21.88.33
12.165.204.94
12.247.54.106
12.207.98.14
12.109.28.204
166.139.117.148
108.195.131.121
172.2.219.18
12.160.106.38
209.65.105.163
12.11.83.5
2001:470:1f15:b80::53
50.251.123.69
67.187.17.182
50.77.74.201
50.215.49.37
50.242.61.85
50.215.49.13
207.255.161.48
207.255.161.67
12.229.20.65
12.248.90.178
12.222.67.255
104.188.249.97
12.97.174.104
12.226.243.99
69.229.5.233
99.99.99.193
12.51.137.246
12.201.176.131
192.156.214.175
12.231.169.28
12.110.243.167
32.141.84.178
12.207.11.217
12.239.75.226
12.49.138.89
23.120.178.123
24.52.70.238
98.30.32.120
12.51.198.43
12.69.230.197
45.19.183.181
207.243.201.24
24.244.106.245
24.244.106.241
24.244.106.207
173.233.103.245
4.2.2.3
24.119.106.138
205.171.3.66
205.171.202.166
204.97.212.10
149.112.112.10
204.57.109.130
67.160.102.146
198.46.206.90
100.25.210.140
199.193.82.210
50.247.87.146
50.196.170.172
50.193.44.173
50.218.46.1
50.76.37.17
24.6.6.13
50.78.97.124
24.6.138.176
23.24.223.237
24.4.172.85
24.5.1.199
24.7.8.66
50.255.3.21
50.196.134.52
24.130.199.35
104.59.209.153
65.70.23.44
12.90.208.78
50.199.40.110
50.77.209.154
50.195.202.162
50.247.134.226
24.13.183.214
24.1.112.49
24.1.240.59
184.183.118.132
98.180.23.77
98.183.37.139
2001:4870:8000:3::100
2001:4870:8000:3::5
216.169.187.240
199.16.220.189
24.181.107.228
64.107.45.5
65.49.37.195
204.106.240.53
104.36.234.65
65.244.0.14
185.66.9.142
64.2.142.60
64.2.142.22
198.52.109.178
208.180.0.250
38.109.190.182
74.81.71.27
216.218.245.200
24.229.42.161
205.171.202.25
205.138.233.198
24.187.226.203
207.172.157.201
209.211.254.18
129.71.254.12
75.150.235.81
216.234.108.166
198.99.193.2
198.99.193.1
108.162.42.172
204.116.57.2
8.26.56.10
208.48.253.106
209.143.22.182
199.85.127.30
4.0.0.53
107.191.48.176";

          var dnss = list.Split('\n').Select(i => i.Trim()).Where(i => IPAddress.TryParse(i, out _)).ToList();
                
                
             //   new List<string>();
             //dnss.Add("8.8.8.8");
             //dnss.Add("8.8.4.4");
             //dnss.Add("9.9.9.9");
             //dnss.Add("149.112.112.112");
             //dnss.Add("208.67.222.222");
             //dnss.Add("208.67.220.220");
             //dnss.Add("1.1.1.1");
             //dnss.Add("1.0.0.1");
             //dnss.Add("185.228.168.9");
             //dnss.Add("185.228.169.9");
             //dnss.Add("76.76.19.19");
             //dnss.Add("76.223.122.150");
             //dnss.Add("94.140.14.14");
             //dnss.Add("94.140.15.15");




            var resolvers = new List<IRequestResolver>();

            foreach(string d in dnss)
            {
                resolvers.Add(new LogResolver(new IPEndPoint(IPAddress.Parse(d), 53)));
            }

            FastestResolver fastestResolver = new FastestResolver(resolvers.ToArray());

            DnsServer server = new DnsServer(new CacheResolver(fastestResolver));

            //// Resolve these domain to localhost
            //masterFile.AddIPAddressResourceRecord("google.com", "127.0.0.1");
            //masterFile.AddIPAddressResourceRecord("github.com", "127.0.0.1");

            // Log every request
            server.Requested += (sender, e) =>
            {
                //Console.WriteLine();
            };
            // On every successful request log the request and the response
            //server.Responded += (sender, e) =>
            //{
                
            //    //Console.WriteLine("{0} => {1}", e.Request?.Questions?.FirstOrDefault()?.Name, (e.Response?.AnswerRecords?.FirstOrDefault(a => a is IPAddressResourceRecord) as IPAddressResourceRecord)?.IPAddress);
            //};
            // Log errors
            server.Errored += (sender, e) => Console.WriteLine(e.Exception.Message);

            // Start the server (by default it listens on port 53)
            //await server.Listen(53553);
            await server.Listen();

           // Console.WriteLine("Hello World!");
        }

        class IPAddressConverter : JsonConverter
        {
            public override bool CanConvert(Type objectType)
            {
                return (objectType == typeof(IPAddress));
            }

            public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
            {
                writer.WriteValue(value.ToString());
            }

            public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
            {
                return IPAddress.Parse((string)reader.Value);
            }
        }

        class IPEndPointConverter : JsonConverter
        {
            public override bool CanConvert(Type objectType)
            {
                return (objectType == typeof(IPEndPoint));
            }

            public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
            {
                IPEndPoint ep = (IPEndPoint)value;
                JObject jo = new JObject();
                jo.Add("Address", JToken.FromObject(ep.Address, serializer));
                jo.Add("Port", ep.Port);
                jo.WriteTo(writer);
            }

            public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
            {
                JObject jo = JObject.Load(reader);
                IPAddress address = jo["Address"].ToObject<IPAddress>(serializer);
                int port = (int)jo["Port"];
                return new IPEndPoint(address, port);
            }
        }

        public class CacheResolver : IRequestResolver
        {
            static readonly ConnectionMultiplexer redis = ConnectionMultiplexer.Connect(
            new ConfigurationOptions
            {
                EndPoints = { "localhost:6379" }
            });

            JsonSerializerSettings settings;

            private IDatabase db;

            private IRequestResolver _inner;

            private readonly IMemoryCache _memoryCache = new MemoryCache(new MemoryCacheOptions());

            public CacheResolver(IRequestResolver inner)
            {
                db = redis.GetDatabase();
                _inner = inner;

                settings = new JsonSerializerSettings();
                settings.Converters.Add(new IPAddressConverter());
                settings.Converters.Add(new IPEndPointConverter());
                settings.Formatting = Formatting.Indented;
            }



            public async Task<IResponse> Resolve(IRequest request, CancellationToken cancellationToken = default)
            {





                if (request.Questions.Count == 1)
                {







                    var q = request.Questions.First();





                    //CurrentDateTime = DateTime.Now;

                    //if (!)
                    //{
                    //    cacheValue = CurrentDateTime;


                    //    _memoryCache.Set(CacheKeys.Entry, cacheValue);
                    //}

                    //CacheCurrentDateTime = cacheValue;

                    var chave = q.Name.ToString() + "_" + q.Type;

                    //var cached = _memoryCache.Get<ClientResponse>(chave);

                    //if (cached != null)
                    //{
                    //    Console.WriteLine("Cache HIT! => " + q.Name.ToString());
                    //    return cached;
                    //}
                    
                    
                    //var cache = db.StringGet(q.Name.ToString());
                    //if (cache.HasValue)
                    //{
                    //    Console.WriteLine("Cache HIT! => " + q.Name.ToString());
                    //    //return JsonConvert.DeserializeObject<Response>(cache, settings);
                    //}


                    var result = await _inner.Resolve(request, cancellationToken);


                    //var r = result.AnswerRecords;

                    _memoryCache.Set(chave, result);

                    // db.StringSet(q.Name.ToString(), JsonConvert.SerializeObject(result, settings));
                        //Console.WriteLine(q.Name.ToString());
                        //Console.WriteLine(r.ToString());
              



                    //foreach (var q in result.)
                    //{
                    //    string jsonString = JsonConvert.SerializeObject(q, Formatting.Indented);
                    //    Console.WriteLine(jsonString);
                    //}

                    //foreach (var q in request.)
                    //{
                    //string jsonString = JsonConvert.SerializeObject(r, Formatting.Indented);
                    //db.StringSet(q.Name.ToString(), r.ToString());
                    //Console.WriteLine(q.Name.ToString());
                    //Console.WriteLine(r.ToString());
                    //}

                    return result;




                }
                else
                {
                    return await _inner.Resolve(request, cancellationToken);
                }
            }
        }

        public class FastestResolver : IRequestResolver
        {


            private IRequestResolver[] _inner;

            Dictionary<string, long> resolvers = new Dictionary<string, long>();

            public FastestResolver(params IRequestResolver[] inner)
            {
                _inner = inner;

                //foreach (var r in inner)
                //{
                //    resolvers.Add((r as ILoggedResolver).getDns(), r);
                //}
            }

            public async Task<IResponse> Resolve(IRequest request, CancellationToken cancellationToken = default)
            {
                //Stopwatch sw = Stopwatch.StartNew();

                IEnumerable<IRequestResolver> top = _inner.Cast<ILoggedResolver>().Where(r => r.getMeanTime() > 0).OrderBy(r => r.getMeanTime()).Take(5).Cast<IRequestResolver>();
                IEnumerable<IRequestResolver> random = _inner.Except(top).OrderBy(x => Guid.NewGuid()).Take(5);

                var chosen = top.Concat(random);

                (IRequestResolver, IResponse) fastest = await await Task.WhenAny(chosen.Select(r => processAsync(request, r)));



                Console.WriteLine("Top");
                foreach (var r in top.Cast<ILoggedResolver>())
                {
                    Console.WriteLine($"{r.getDns()} => {r.getTime()}/{r.getCount()}/{r.getMeanTime()}");
                }


                //sw.Stop();

                Console.WriteLine($"# FastestResolver @{((ILoggedResolver)fastest.Item1).getDns()} => {request.Questions.First().Name} => {((ILoggedResolver)fastest.Item1).getTime()}");
         

                return  fastest.Item2;
            }

            async Task<(IRequestResolver, IResponse)> processAsync(IRequest request, IRequestResolver resolver)
            {
                return (resolver, await resolver.Resolve(request));
            }
        }

        public class LogResolver : IRequestResolver, ILoggedResolver
        {
            IRequestResolver res;
            string dns;
            ConcurrentQueue<long> time = new ConcurrentQueue<long>();

            public LogResolver(IPEndPoint inner)
            {
                res = new UdpRequestResolver(inner, 1000);
                dns = inner.ToString();
            }

            public long getCount()
            {
                return time.Count();
            }

            public string getDns()
            {
                return dns;
            }

            public long getMeanTime()
            {
                if(time.Count == 0) return 0;
                return (long)time.Average();
            }

            public long getTime()
            {
                if (time.Count == 0) return 0;
                return time.Last();
            }

            public async Task<IResponse> Resolve(IRequest request, CancellationToken cancellationToken = default)
            {
                
                Stopwatch sw = Stopwatch.StartNew();

                IResponse response = await res.Resolve(request);

                sw.Stop();

                time.Enqueue(sw.ElapsedMilliseconds);

                if(time.Count > 100)
                {
                    time.TryDequeue(out _);
                }

                Console.WriteLine($"{request.Questions.First().Name}@{dns} => {getTime()}/{getCount()}/{getMeanTime()}");

                return response;
            }
        }

        interface ILoggedResolver
        {
            string getDns();
            long getTime();
            long getCount();
            long getMeanTime();
        }
    }
}
